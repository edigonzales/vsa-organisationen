package ch.so.agi.vsa.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _OrganisationStatus was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _OrganisationStatus extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ITF_CODE_PK_COLUMN = "itfCode";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> DISP_NAME = PropertyFactory.createString("dispName", String.class);
    public static final StringProperty<String> ILI_CODE = PropertyFactory.createString("iliCode", String.class);
    public static final NumericProperty<Integer> INACTIVE = PropertyFactory.createNumeric("inactive", Integer.class);
    public static final NumericProperty<Integer> SEQ = PropertyFactory.createNumeric("seq", Integer.class);

    protected String description;
    protected String dispName;
    protected String iliCode;
    protected int inactive;
    protected Integer seq;


    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setDispName(String dispName) {
        beforePropertyWrite("dispName", this.dispName, dispName);
        this.dispName = dispName;
    }

    public String getDispName() {
        beforePropertyRead("dispName");
        return this.dispName;
    }

    public void setIliCode(String iliCode) {
        beforePropertyWrite("iliCode", this.iliCode, iliCode);
        this.iliCode = iliCode;
    }

    public String getIliCode() {
        beforePropertyRead("iliCode");
        return this.iliCode;
    }

    public void setInactive(int inactive) {
        beforePropertyWrite("inactive", this.inactive, inactive);
        this.inactive = inactive;
    }

    public int getInactive() {
        beforePropertyRead("inactive");
        return this.inactive;
    }

    public void setSeq(Integer seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public Integer getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "dispName":
                return this.dispName;
            case "iliCode":
                return this.iliCode;
            case "inactive":
                return this.inactive;
            case "seq":
                return this.seq;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "dispName":
                this.dispName = (String)val;
                break;
            case "iliCode":
                this.iliCode = (String)val;
                break;
            case "inactive":
                this.inactive = val == null ? 0 : (int)val;
                break;
            case "seq":
                this.seq = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.dispName);
        out.writeObject(this.iliCode);
        out.writeInt(this.inactive);
        out.writeObject(this.seq);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.dispName = (String)in.readObject();
        this.iliCode = (String)in.readObject();
        this.inactive = in.readInt();
        this.seq = (Integer)in.readObject();
    }

}
